{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Show","TodoList","todos","setUserId","useState","searchTitle","setSearchTitle","completFilter","setcompletFilter","todosToShow","setTodosToShow","useEffect","filter","todo","filtredByTitle","title","toLowerCase","includes","Active","completed","Completed","All","className","htmlFor","type","value","onChange","target","id","placeholder","event","map","classNames","checked","readOnly","onClick","userId","MAIN_URL","getTodos","a","fetch","resp","json","getUser","user","CurrentUser","resetUser","currentUser","setCurrentUser","newUser","useCallback","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","loadTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c090e354.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  setUserId: (id: number) => void,\n}\n\nenum Show {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setUserId,\n}) => {\n  const [searchTitle, setSearchTitle] = useState('');\n  const [completFilter, setcompletFilter] = useState('All');\n  const [todosToShow, setTodosToShow] = useState(todos);\n\n  useEffect(() => {\n    setTodosToShow(todos.filter(todo => {\n      const filtredByTitle = todo.title.toLowerCase()\n        .includes(searchTitle.toLowerCase());\n\n      switch (completFilter) {\n        case Show.Active:\n          return filtredByTitle && !todo.completed;\n        case Show.Completed:\n          return filtredByTitle && todo.completed;\n        case Show.All:\n          return filtredByTitle;\n        default:\n          return false;\n      }\n    }));\n  }, [todos, searchTitle, completFilter]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2 className=\"TodoList__title\">Todos: </h2>\n      <label htmlFor=\"searchBar\">\n        <input\n          type=\"text\"\n          value={searchTitle}\n          onChange={({ target }) => {\n            setSearchTitle(target.value);\n          }}\n          id=\"searchBar\"\n          className=\"TodoList__bar\"\n          placeholder=\"Search Title\"\n        />\n      </label>\n      <select\n        className=\"TodoList__select\"\n        value={completFilter}\n        onChange={(event) => {\n          setcompletFilter(event.target.value);\n        }}\n      >\n        <option value={Show.All}>All</option>\n        <option value={Show.Active}>Active</option>\n        <option value={Show.Completed}>Completed</option>\n      </select>\n\n      <div className=\"TodoList__container\">\n        <ul className=\"TodoList__list\">\n          {todosToShow.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n            >\n              <label>\n                <input\n                  checked={todo.completed}\n                  type=\"checkbox\"\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                data-cy=\"userButton\"\n                onClick={() => {\n                  setUserId(todo.userId);\n                }}\n                className=\"TodoList__user-button button\"\n                type=\"button\"\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst MAIN_URL = 'https://mate.academy/students-api';\n\nexport const getData = async (url: string) => {\n  const response = await fetch(`${MAIN_URL}${url}`);\n\n  return response.json();\n};\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const resp = await fetch(`${MAIN_URL}/todos`);\n  const todos = await resp.json();\n\n  return todos;\n};\n\nexport const getUser = async (id: number): Promise<User> => {\n  const resp = await fetch(`${MAIN_URL}/users/${id}`);\n  const user = await resp.json();\n\n  return user;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  id: number;\n  resetUser: () => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  id,\n  resetUser,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  const newUser = useCallback(async () => {\n    setCurrentUser(await getUser(id));\n  }, [id]);\n\n  useEffect(() => {\n    newUser();\n  }, [id]);\n\n  return (\n    <>\n      { currentUser && (\n        <div className=\"currentUser\">\n          <h2 className=\"currentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"currentUser__name\">\n            {currentUser.name}\n          </h3>\n\n          <p className=\"currentUser__email\">\n            {currentUser.email}\n          </p>\n\n          <p className=\"currentUser__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"currentUser__clear\"\n            onClick={resetUser}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const resetUser = useCallback(() => {\n    return setSelectedUserId(0);\n  }, []);\n\n  const loadTodos = useCallback(async () => {\n    setTodos(await getTodos());\n  }, []);\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              id={selectedUserId}\n              resetUser={resetUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}